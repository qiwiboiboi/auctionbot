"""
Conversation handlers for auction bot
"""

from uuid import UUID
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

from domain import Auction, AuctionStatus

# Import base handlers with relative import
try:
    from .base import BaseHandlers, BotStates
except ImportError:
    from base import BaseHandlers, BotStates


class ConversationHandlers(BaseHandlers):
    """Handlers for conversations (registration, auction creation, bidding)"""

    # ============ REGISTRATION HANDLERS ============

    async def register_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle username input"""
        # Handle callback query first (from inline buttons)
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            
            # Check which callback was pressed
            if query.data.startswith("register_join_"):
                auction_id = UUID(query.data.split('_')[2])
                context.user_data['join_auction_id'] = auction_id
                context.user_data['state'] = BotStates.REGISTER_USERNAME
                await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):")
                return BotStates.REGISTER_USERNAME
            elif query.data == "register_start":
                context.user_data['state'] = BotStates.REGISTER_USERNAME
                await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):")
                return BotStates.REGISTER_USERNAME
        
        # Handle text message (username input)
        if not update.message or not update.message.text:
            await update.effective_message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
            return BotStates.REGISTER_USERNAME
            
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        username = update.message.text.strip()
        
        if not username.replace('_', '').isalnum():
            await update.message.reply_text("‚ùå –õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _")
            return BotStates.REGISTER_USERNAME
        
        success = await self.auction_service.register_user(
            update.effective_user.id, 
            username,
            update.effective_user.username,
            update.effective_user.first_name,
            update.effective_user.last_name
        )
        
        if success:
            user = await self.user_repo.get_user(update.effective_user.id)
            message = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à –ª–æ–≥–∏–Ω: *{username}*"
            
            if user.is_admin:
                keyboard = self.get_admin_keyboard()
                message += "\n\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
                await update.message.reply_text(message, parse_mode='Markdown', reply_markup=keyboard)
            else:
                await update.message.reply_text(message, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
            
            # If joining auction after registration
            if 'join_auction_id' in context.user_data:
                auction_id = context.user_data['join_auction_id']
                await self.auction_service.join_auction(auction_id, update.effective_user.id)
                auction = await self.auction_repo.get_auction(auction_id)
                if auction:
                    auction_message = await self._format_auction_message(auction)
                    auction_keyboard = self._get_auction_keyboard(auction_id, True)
                    
                    if auction.photo_url:
                        await self.send_auction_media(update, auction, auction_message, auction_keyboard)
                    else:
                        await update.message.reply_text(auction_message, parse_mode='Markdown', reply_markup=auction_keyboard)
                del context.user_data['join_auction_id']
            else:
                # Show current auction after registration
                await self.show_current_auction_for_user(update, context, user)
        else:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
            return BotStates.REGISTER_USERNAME
        
        # Clear state
        context.user_data.clear()
        return ConversationHandler.END

    # ============ CALLBACK HANDLERS (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã) ============

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle all callback queries"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        user = await self.user_repo.get_user(user_id)
        
        if data == "main_menu":
            keyboard = self.get_main_menu_keyboard()
            try:
                await query.edit_message_text("üì± *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode='Markdown', reply_markup=keyboard)
            except Exception:
                # If can't edit (e.g. media message), send new message
                await query.message.reply_text("üì± *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode='Markdown', reply_markup=keyboard)
        
        elif data == "menu_current_auction":
            await self.show_current_auction_callback(query, context)
        
        elif data == "menu_profile":
            await self.show_profile_callback(query, context)
        
        elif data == "menu_history":
            await self.show_history_callback(query, context)
        
        elif data == "menu_help":
            await self.show_help_callback(query, context)
        
        elif data.startswith("register_join_"):
            auction_id = UUID(data.split('_')[2])
            context.user_data['join_auction_id'] = auction_id
            context.user_data['state'] = BotStates.REGISTER_USERNAME
            try:
                await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):")
            except Exception:
                await query.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):")
            return BotStates.REGISTER_USERNAME
        
        elif data == "register_start":
            context.user_data['state'] = BotStates.REGISTER_USERNAME
            try:
                await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):")
            except Exception:
                await query.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):")
            return BotStates.REGISTER_USERNAME
        
        elif data.startswith("join_"):
            await self.join_auction(update, context)
        
        elif data.startswith("bid_"):
            await self.bid_start(update, context)
        
        elif data.startswith("status_"):
            await self.show_status(update, context)
        
        elif data.startswith("end_auction_"):
            await self.end_auction_callback(update, context)
        
        elif data.startswith("user_"):
            await self.handle_user_action(update, context)
        
        elif data.startswith("block_") or data.startswith("unblock_"):
            await self.toggle_user_block(update, context)
        
        elif data == "cancel_end":
            try:
                await query.edit_message_text("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            except Exception:
                await query.message.reply_text("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        elif data == "back_to_users":
            # Recreate users list
            await self.show_users_callback(query, context)
        
        elif data == "cancel_users":
            try:
                await query.edit_message_text("‚úÖ –ó–∞–∫—Ä—ã—Ç–æ")
            except Exception:
                await query.message.reply_text("‚úÖ –ó–∞–∫—Ä—ã—Ç–æ")

    # ============ CALLBACK IMPLEMENTATIONS ============

    async def show_current_auction_callback(self, query, context):
        """Show current auction from callback"""
        current_auction = await self.auction_service.get_current_auction()
        user_id = query.from_user.id
        
        if current_auction:
            message = await self._format_auction_message(current_auction)
            keyboard = self._get_auction_keyboard(current_auction.auction_id, user_id in current_auction.participants)
            # Create new keyboard with additional button
            new_keyboard = list(keyboard.inline_keyboard)
            new_keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
            keyboard = InlineKeyboardMarkup(new_keyboard)
            
            try:
                await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
            except Exception:
                await query.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            next_auction = await self.auction_service.get_next_scheduled_auction()
            if next_auction:
                message = f"‚è≥ *–°–ª–µ–¥—É—é—â–∏–π –∞—É–∫—Ü–∏–æ–Ω:*\n\n" + await self._format_auction_message(next_auction)
            else:
                message = "üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤"
            
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            try:
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=keyboard)
            except Exception:
                await query.message.reply_text(message, parse_mode='Markdown', reply_markup=keyboard)

    async def show_profile_callback(self, query, context):
        """Show user profile from callback"""
        status = await self.auction_service.get_user_status(query.from_user.id)
        
        if not status["registered"]:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
            return
        
        user = status["user"]
        message = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        message += f"–õ–æ–≥–∏–Ω: {user.username}\n"
        message += f"–ò–º—è: {user.display_name}\n"
        message += f"–°—Ç–∞—Ç—É—Å: {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫'}\n"
        message += f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        if status["participating_in"]:
            message += "üìä *–£—á–∞—Å—Ç–∏–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö:*\n"
            for participation in status["participating_in"]:
                auction = participation["auction"]
                user_bid = participation["user_bid"]
                is_leader = participation["is_leader"]
                
                message += f"\nüéØ {auction.title}\n"
                if user_bid:
                    message += f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {user_bid.amount:,.0f}‚ÇΩ\n"
                    message += f"–°—Ç–∞—Ç—É—Å: {'üèÜ –õ–∏–¥–µ—Ä' if is_leader else 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫'}\n"
                else:
                    message += "–°—Ç–∞–≤–æ–∫ –Ω–µ—Ç\n"
        else:
            message += "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö"
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=keyboard)

    async def show_history_callback(self, query, context):
        """Show auction history from callback"""
        completed_auctions = await self.auction_repo.get_completed_auctions()
        
        if not completed_auctions:
            message = "üì≠ –ò—Å—Ç–æ—Ä–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –ø—É—Å—Ç–∞"
        else:
            message = "üìä *–ò—Å—Ç–æ—Ä–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤:*\n\n"
            for auction in completed_auctions[:5]:  # Show last 5
                message += f"üéØ *{auction.title}*\n"
                message += f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {auction.current_price:,.0f}‚ÇΩ\n"
                
                if auction.current_leader:
                    leader_user = await self.user_repo.get_user(auction.current_leader.user_id)
                    leader_name = leader_user.display_name if leader_user else auction.current_leader.username
                    message += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {leader_name}\n"
                
                message += f"üìÖ {auction.created_at.strftime('%d.%m.%Y')}\n\n"
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=keyboard)

    async def show_help_callback(self, query, context):
        """Show help from callback"""
        message = (
            "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
            "üéØ *–¢–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω* - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω\n"
            "üë§ *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* - –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üìä *–ò—Å—Ç–æ—Ä–∏—è* - –ø—Ä–æ—à–ª—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', "
            "–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí∏ –ü–µ—Ä–µ–±–∏—Ç—å —Å—Ç–∞–≤–∫—É' –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫."
        )
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=keyboard)

    async def end_auction_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle end auction callback"""
        query = update.callback_query
        await query.answer()
        
        auction_id = UUID(query.data.split('_')[2])
        success = await self.auction_service.end_auction(auction_id, update.effective_user.id)
        
        if success:
            auction = await self.auction_repo.get_auction(auction_id)
            await query.edit_message_text(f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω '{auction.title}' –∑–∞–≤–µ—Ä—à—ë–Ω")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞")

    # ============ MORE CALLBACK HANDLERS ============

    async def join_auction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle join auction button"""
        query = update.callback_query
        await query.answer()
        
        auction_id = UUID(query.data.split('_')[1])
        user_id = update.effective_user.id
        
        user = await self.user_repo.get_user(user_id)
        if not user:
            try:
                await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            except Exception:
                await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        if user.is_blocked:
            try:
                await query.edit_message_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö")
            except Exception:
                await query.message.reply_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö")
            return
        
        success = await self.auction_service.join_auction(auction_id, user_id)
        if success:
            auction = await self.auction_repo.get_auction(auction_id)
            message = await self._format_auction_message(auction)
            keyboard = self._get_auction_keyboard(auction_id, user_id in auction.participants)
            # Create new keyboard with additional button
            new_keyboard = list(keyboard.inline_keyboard)
            new_keyboard.append([InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            keyboard = InlineKeyboardMarkup(new_keyboard)
            
            try:
                await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
            except Exception:
                # If can't edit (media message), send new message
                await query.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            try:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É")
            except Exception:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É")

    async def show_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle status button"""
        query = update.callback_query
        await query.answer()
        
        auction_id = UUID(query.data.split('_')[1])
        auction = await self.auction_repo.get_auction(auction_id)
        
        if not auction:
            try:
                await query.edit_message_text("‚ùå –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception:
                await query.message.reply_text("‚ùå –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        message = await self._format_auction_message(auction)
        keyboard = self._get_auction_keyboard(auction_id, update.effective_user.id in auction.participants)
        # Create new keyboard with additional button
        new_keyboard = list(keyboard.inline_keyboard)
        new_keyboard.append([InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(new_keyboard)
        
        try:
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        except Exception:
            # If can't edit (media message), send new message
            await query.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

    # ============ ADMIN USER MANAGEMENT ============

    async def show_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show registered users (admin only)"""
        user = await self.user_repo.get_user(update.effective_user.id)
        if not user or not user.is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        users = await self.user_repo.get_all_users()
        if not users:
            await update.message.reply_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
            return
        
        keyboard = []
        for user_obj in users[:10]:  # Show first 10 users
            status_emoji = "üö´" if user_obj.is_blocked else "‚úÖ"
            admin_emoji = " üëë" if user_obj.is_admin else ""
            keyboard.append([InlineKeyboardButton(
                f"{status_emoji} {user_obj.display_name}{admin_emoji}", 
                callback_data=f"user_{user_obj.user_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel_users")])
        
        await update.message.reply_text(
            f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):*\n\n"
            "‚úÖ - –∞–∫—Ç–∏–≤–Ω—ã–π\nüö´ - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π\nüëë - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_users_callback(self, query, context):
        """Show users list from callback"""
        users = await self.user_repo.get_all_users()
        if not users:
            await query.edit_message_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
            return
        
        keyboard = []
        for user_obj in users[:10]:  # Show first 10 users
            status_emoji = "üö´" if user_obj.is_blocked else "‚úÖ"
            admin_emoji = " üëë" if user_obj.is_admin else ""
            keyboard.append([InlineKeyboardButton(
                f"{status_emoji} {user_obj.display_name}{admin_emoji}", 
                callback_data=f"user_{user_obj.user_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel_users")])
        
        await query.edit_message_text(
            f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):*\n\n"
            "‚úÖ - –∞–∫—Ç–∏–≤–Ω—ã–π\nüö´ - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π\nüëë - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_user_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle user action from admin panel"""
        query = update.callback_query
        await query.answer()
        
        user_id = int(query.data.split('_')[1])
        target_user = await self.user_repo.get_user(user_id)
        
        if not target_user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if target_user.is_admin:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_users")
            ]])
            await query.edit_message_text(
                f"üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\n\n"
                f"üë§ {target_user.display_name}\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {target_user.created_at.strftime('%d.%m.%Y')}\n\n"
                "‚ö†Ô∏è –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            return
        
        block_text = "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if target_user.is_blocked else "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
        block_action = f"unblock_{user_id}" if target_user.is_blocked else f"block_{user_id}"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(block_text, callback_data=block_action)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_users")]
        ])
        
        status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if target_user.is_blocked else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        
        await query.edit_message_text(
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*\n\n"
            f"–ò–º—è: {target_user.display_name}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {target_user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=keyboard
        )

    async def toggle_user_block(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Toggle user block status"""
        query = update.callback_query
        await query.answer()
        
        action, user_id = query.data.split('_')
        user_id = int(user_id)
        is_blocking = action == "block"
        
        target_user = await self.user_repo.get_user(user_id)
        if not target_user or target_user.is_admin:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        
        await self.user_repo.update_user_status(user_id, is_blocking)
        
        action_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocking else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        await query.edit_message_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.display_name} {action_text}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_users")
            ]])
        )

    # ============ AUCTION CREATION HANDLERS ============

    async def create_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start auction creation"""
        user = await self.user_repo.get_user(update.effective_user.id)
        if not user or not user.is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã")
            return ConversationHandler.END
        
        context.user_data['state'] = BotStates.CREATE_TITLE
        await update.message.reply_text(
            "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:",
            parse_mode='Markdown',
            reply_markup=self.get_cancel_keyboard()
        )
        return BotStates.CREATE_TITLE

    async def create_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle auction title input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        title = update.message.text.strip()
        context.user_data['auction_title'] = title
        context.user_data['state'] = BotStates.CREATE_START_PRICE
        await update.message.reply_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=self.get_cancel_keyboard()
        )
        return BotStates.CREATE_START_PRICE

    async def create_start_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle start price input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        try:
            price = float(update.message.text.strip())
            if price <= 0:
                raise ValueError()
            context.user_data['start_price'] = price
            context.user_data['state'] = BotStates.CREATE_DURATION
            await update.message.reply_text(
                "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ —á–∞—Å–∞—Ö (–∏–ª–∏ 0 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ):",
                reply_markup=self.get_cancel_keyboard()
            )
            return BotStates.CREATE_DURATION
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")
            return BotStates.CREATE_START_PRICE

    async def create_duration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle duration input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        try:
            duration = int(update.message.text.strip())
            if duration < 0:
                raise ValueError()
            context.user_data['duration'] = duration
            context.user_data['state'] = BotStates.CREATE_DESCRIPTION
            await update.message.reply_text(
                "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                reply_markup=self.get_cancel_keyboard()
            )
            return BotStates.CREATE_DESCRIPTION
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤")
            return BotStates.CREATE_DURATION

    async def create_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle description input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        description = update.message.text.strip()
        if description.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            context.user_data['description'] = description
        
        context.user_data['state'] = BotStates.CREATE_MEDIA
        await update.message.reply_text(
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=self.get_cancel_keyboard()
        )
        return BotStates.CREATE_MEDIA

    async def create_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle media input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
        
        if update.message.text and update.message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            # No media
            pass
        elif update.message.photo:
            # Photo
            photo = update.message.photo[-1]  # Get highest resolution
            context.user_data['photo_url'] = photo.file_id
            context.user_data['media_type'] = 'photo'
        elif update.message.video:
            # Video
            context.user_data['photo_url'] = update.message.video.file_id
            context.user_data['media_type'] = 'video'
        elif update.message.animation:
            # GIF
            context.user_data['photo_url'] = update.message.animation.file_id
            context.user_data['media_type'] = 'animation'
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
            )
            return BotStates.CREATE_MEDIA
        
        context.user_data['state'] = BotStates.CREATE_CUSTOM_MESSAGE
        await update.message.reply_text(
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ):",
            reply_markup=self.get_cancel_keyboard()
        )
        return BotStates.CREATE_CUSTOM_MESSAGE

    async def create_custom_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle custom message input and create auction"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        custom_message = update.message.text.strip()
        if custom_message.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            context.user_data['custom_message'] = custom_message
        
        # Create auction
        auction_id = await self.auction_service.create_auction(
            creator_id=update.effective_user.id,
            title=context.user_data['auction_title'],
            start_price=context.user_data['start_price'],
            duration_hours=context.user_data['duration'],
            description=context.user_data.get('description'),
            photo_url=context.user_data.get('photo_url'),
            media_type=context.user_data.get('media_type', 'photo'),
            custom_message=context.user_data.get('custom_message')
        )
        
        # Get created auction
        auction = await self.auction_repo.get_auction(auction_id)
        
        # Check if it's active or scheduled
        if auction.status == AuctionStatus.ACTIVE:
            await update.message.reply_text(
                "‚úÖ –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=self.get_admin_keyboard()
            )
            
            # Broadcast to all users
            await self.broadcast_new_auction(auction)
        else:
            await update.message.reply_text(
                "‚úÖ –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!",
                reply_markup=self.get_admin_keyboard()
            )
        
        # Clear state
        context.user_data.clear()
        return ConversationHandler.END

    async def broadcast_new_auction(self, auction: Auction):
        """Broadcast new auction to all users"""
        all_users = await self.user_repo.get_all_users()
        
        for user in all_users:
            if user.is_blocked or user.is_admin:
                continue
                
            try:
                welcome_msg = auction.custom_message or "üéâ *–ù–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞–ª—Å—è!*"
                auction_message = await self._format_auction_message(auction)
                keyboard = self._get_auction_keyboard(auction.auction_id, user.user_id in auction.participants)
                
                await self.auction_service.notification_service.application.bot.send_message(
                    chat_id=user.user_id,
                    text=welcome_msg,
                    parse_mode='Markdown'
                )
                
                if auction.photo_url:
                    if auction.media_type == 'photo':
                        await self.auction_service.notification_service.application.bot.send_photo(
                            chat_id=user.user_id,
                            photo=auction.photo_url,
                            caption=auction_message,
                            parse_mode='Markdown',
                            reply_markup=keyboard
                        )
                    elif auction.media_type == 'video':
                        await self.auction_service.notification_service.application.bot.send_video(
                            chat_id=user.user_id,
                            video=auction.photo_url,
                            caption=auction_message,
                            parse_mode='Markdown',
                            reply_markup=keyboard
                        )
                    elif auction.media_type == 'animation':
                        await self.auction_service.notification_service.application.bot.send_animation(
                            chat_id=user.user_id,
                            animation=auction.photo_url,
                            caption=auction_message,
                            parse_mode='Markdown',
                            reply_markup=keyboard
                        )
                else:
                    await self.auction_service.notification_service.application.bot.send_message(
                        chat_id=user.user_id,
                        text=auction_message,
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
            except Exception as e:
                # Log error but continue with other users
                pass

    # ============ BIDDING HANDLERS ============

    async def bid_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start bidding process"""
        query = update.callback_query
        await query.answer()
        
        auction_id = UUID(query.data.split('_')[1])
        user_id = update.effective_user.id
        
        user = await self.user_repo.get_user(user_id)
        if user and user.is_blocked:
            try:
                await query.edit_message_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö")
            except Exception:
                await query.message.reply_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö")
            return ConversationHandler.END
        
        auction = await self.auction_repo.get_auction(auction_id)
        if not auction or not auction.is_active:
            try:
                await query.edit_message_text("‚ùå –ê—É–∫—Ü–∏–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            except Exception:
                await query.message.reply_text("‚ùå –ê—É–∫—Ü–∏–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            return ConversationHandler.END
        
        if user_id not in auction.participants:
            try:
                await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∞—É–∫—Ü–∏–æ–Ω—É")
            except Exception:
                await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∞—É–∫—Ü–∏–æ–Ω—É")
            return ConversationHandler.END
        
        self.bid_contexts[user_id] = auction_id
        context.user_data['state'] = BotStates.PLACE_BID
        bid_message = (
            f"üí∏ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: *{auction.current_price:,.0f}‚ÇΩ*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (–±–æ–ª—å—à–µ {auction.current_price:,.0f}‚ÇΩ):"
        )
        
        try:
            await query.edit_message_text(bid_message, parse_mode='Markdown')
        except Exception:
            # If can't edit (media message), send new message
            await query.message.reply_text(bid_message, parse_mode='Markdown')
        
        return BotStates.PLACE_BID

    async def place_bid(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle bid amount input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user_id = update.effective_user.id
            if user_id in self.bid_contexts:
                del self.bid_contexts[user_id]
            return await self.cancel(update, context)
            
        try:
            amount = float(update.message.text.strip())
            user_id = update.effective_user.id
            auction_id = self.bid_contexts.get(user_id)
            
            if not auction_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∞–≤–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω")
                context.user_data.clear()
                return ConversationHandler.END
            
            success = await self.auction_service.place_bid(auction_id, user_id, amount)
            if success:
                await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ {amount:,.0f}‚ÇΩ –ø—Ä–∏–Ω—è—Ç–∞!")
                
                # Show updated auction
                auction = await self.auction_repo.get_auction(auction_id)
                if auction:
                    message = await self._format_auction_message(auction)
                    keyboard = self._get_auction_keyboard(auction_id, True)
                    # Create new keyboard with additional button
                    new_keyboard = list(keyboard.inline_keyboard)
                    new_keyboard.append([InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
                    keyboard = InlineKeyboardMarkup(new_keyboard)
                    
                    if auction.photo_url:
                        await self.send_auction_media(update, auction, message, keyboard)
                    else:
                        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
            else:
                auction = await self.auction_repo.get_auction(auction_id)
                await update.message.reply_text(
                    f"‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {auction.current_price:,.0f}‚ÇΩ"
                )
                return BotStates.PLACE_BID
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
            return BotStates.PLACE_BID
        
        finally:
            user_id = update.effective_user.id
            if user_id in self.bid_contexts:
                del self.bid_contexts[user_id]
        
        # Clear state
        context.user_data.clear()
        return ConversationHandler.END